---
import Layout from '../layouts/Layout.astro';
import WeatherCard from '../components/WeatherCard.astro';
import { parseWeatherData } from '../utils/parseData';

const DATA_URL = 'https://www.gotafreda.es/estacions/c05m085e03/avamet.htm';

async function fetchWeatherData() {
  try {
    const response = await fetch(DATA_URL);
    const text = await response.text();
    return parseWeatherData(text);
  } catch (error) {
    console.error('Error fetching data:', error);
    return null;
  }
}

const data = await fetchWeatherData();
---

<Layout title="Estación Meteorológica">
  <main>
    <h1>Estación Meteorológica</h1>
    <p>Última actualización: <span id="last_update">{data?.data || 'Cargando...'}</span></p>

    <div class="weather-grid">
      <WeatherCard title="Temperatura">
        <ul>
          <li>Actual: <span id="temp">{data?.temp || '--'}°C</span></li>
          <li>Máxima: <span id="temp_max">{data?.temp_max || '--'}°C</span></li>
          <li>Mínima: <span id="temp_min">{data?.temp_min || '--'}°C</span></li>
        </ul>
      </WeatherCard>

      <WeatherCard title="Humedad y Presión">
        <ul>
          <li>Humedad: <span id="hrel">{data?.hrel || '--'}%</span></li>
          <li>Presión: <span id="pres">{data?.pres || '--'} hPa</span></li>
        </ul>
      </WeatherCard>

      <WeatherCard title="Viento">
        <ul>
          <li>Velocidad: <span id="vent">{data?.vent || '--'} km/h</span></li>
          <li>Máximo: <span id="vent_max">{data?.vent_max || '--'} km/h</span></li>
          <li>Dirección: <span id="vent_dir">{data?.vent_dir || '--'}°</span></li>
        </ul>
      </WeatherCard>

      <WeatherCard title="Precipitación">
        <ul>
          <li>Actual: <span id="prec">{data?.prec || '--'} mm</span></li>
          <li>Mensual: <span id="prec_mes">{data?.prec_mes || '--'} mm</span></li>
          <li>Anual: <span id="prec_any">{data?.prec_any || '--'} mm</span></li>
        </ul>
      </WeatherCard>
    </div>
  </main>

  <style>
    .weather-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      padding: 1rem;
    }
    .weather-card {
      padding: 1rem;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    ul {
      list-style: none;
      padding: 0;
    }
    li {
      margin: 0.5rem 0;
    }
  </style>

<script>
	interface WeatherData {
	  [key: string]: string;
	}
  
	async function updateData() {
	  try {
		// Usar CORS Anywhere como proxy
		const proxyUrl = 'https://cors-anywhere.herokuapp.com/https://www.gotafreda.es/estacions/c05m085e03/avamet.htm';
		
		const response = await fetch(proxyUrl, {
		  headers: {
			'Origin': window.location.origin
		  }
		});
  
		if (!response.ok) {
		  throw new Error(`HTTP error! status: ${response.status}`);
		}
  
		const text = await response.text();
		const data: WeatherData = {};
		
		if (text && text.includes('|')) {
		  text.split('|').forEach(pair => {
			if (!pair) return;
			const [key, value] = pair.split('=');
			if (key && value) {
			  // Limpiamos los posibles espacios en blanco
			  data[key.trim()] = value.trim();
			}
		  });
  
		  // Debug: mostrar datos recibidos en consola
		  console.log('Datos recibidos:', data);
  
		  // Actualizar solo los elementos que existen
		  const updateElement = (id: string, value: string, unit: string) => {
			const element = document.querySelector(`#${id}`);
			if (element && value) {
			  element.textContent = `${value}${unit}`;
			}
		  };
  
		  // Actualizar cada tipo de dato específicamente
		  updateElement('temp', data.temp, '°C');
		  updateElement('temp_max', data.temp_max, '°C');
		  updateElement('temp_min', data.temp_min, '°C');
		  updateElement('hrel', data.hrel, '%');
		  updateElement('pres', data.pres, ' hPa');
		  updateElement('vent', data.vent, ' km/h');
		  updateElement('vent_dir', data.vent_dir, '°');
		  // Corregimos específicamente el viento máximo
		  updateElement('vent_max', data.vent_max, ' km/h');
		  updateElement('prec', data.prec, ' mm');
		  updateElement('prec_mes', data.prec_mes, ' mm');
		  updateElement('prec_any', data.prec_any, ' mm');
		  updateElement('last_update', data.data, '');
  
		  // Remover mensaje de error si existe
		  const errorElement = document.querySelector('.error-message');
		  if (errorElement) {
			errorElement.remove();
		  }
		}
	  } catch (error) {
		console.error('Error fetcheando datos:', error);
		
		// Mostrar mensaje de error solo si no existe ya
		if (!document.querySelector('.error-message')) {
		  const errorElement = document.createElement('div');
		  errorElement.className = 'error-message';
		  errorElement.textContent = 'Error al cargar los datos. Por favor, intenta más tarde.';
		  document.body.insertBefore(errorElement, document.body.firstChild);
		}
	  }
	}
  
	// Función para iniciar las actualizaciones
	function startUpdates() {
	  updateData(); // Primera actualización inmediata
	  
	  // Actualizar cada 5 minutos
	  const intervalId = setInterval(updateData, 5 * 60 * 1000);
	  
	  // Limpiar intervalo cuando se cierre la página
	  window.addEventListener('beforeunload', () => {
		clearInterval(intervalId);
	  });
	}
  
	// Iniciar las actualizaciones cuando el DOM esté listo
	if (document.readyState === 'loading') {
	  document.addEventListener('DOMContentLoaded', startUpdates);
	} else {
	  startUpdates();
	}
  </script>
  
  <style>
	.error-message {
	  background-color: #ffebee;
	  color: #c62828;
	  padding: 1rem;
	  margin: 1rem;
	  border-radius: 4px;
	  text-align: center;
	}
  </style>
</Layout>